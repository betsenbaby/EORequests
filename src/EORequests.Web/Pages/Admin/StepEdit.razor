@page "/admin/steps/new"
@page "/admin/steps/{id:guid}/edit"
@attribute [Authorize(Policy = "AdminOnly")]
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.WebUtilities
@using EORequests.Application.Interfaces
@inject IWorkflowStepTemplateService Steps
@inject NavigationManager Nav

<div class="container py-4">
    <h2 class="h5 mb-3">@(_isNew ? "New Step" : "Edit Step")</h2>

    @if (_vm is null)
    {
        <div class="text-muted">Loading…</div>
    }
    else
    {
        <EditForm Model="_vm" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator />
            <div class="row g-3">
                <div class="col-md-3">
                    <label class="form-label">Order</label>
                    <input class="form-control" type="number" @bind="_vm.StepOrder" />
                </div>
                <div class="col-md-3">
                    <label class="form-label">Code</label>
                    <input class="form-control" @bind="_vm.Code" />
                </div>
                <div class="col-md-6">
                    <label class="form-label">Name</label>
                    <input class="form-control" @bind="_vm.Name" />
                </div>

                <div class="col-md-4">
                    <label class="form-label">Assignment Mode</label>
                    <select class="form-select" @bind="_vm.AssignmentMode">
                        <option>AutoAssign</option>
                        <option>RoleBased</option>
                        <option>SelectedByPreviousStep</option>
                    </select>
                </div>

                <div class="col-md-8">
                    <label class="form-label">Allowed Roles (CSV)</label>
                    <input class="form-control" @bind="_vm.AllowedRolesCsv" />
                </div>

                <div class="col-md-4">
                    <div class="form-check mt-4">
                        <input class="form-check-input" type="checkbox" @bind="_vm.AllowCreatorOrPreparer" />
                        <label class="form-check-label">Allow Creator/Preparer</label>
                    </div>
                </div>
            </div>

            <div class="mt-3 d-flex gap-2">
                <button class="btn btn-primary" type="submit">Save</button>
                <a class="btn btn-outline-secondary" href="@($"/admin/workflows/{_vm.WorkflowTemplateId}/steps")">Back</a>
            </div>
        </EditForm>
    }
</div>

@code {
    [Parameter] public Guid? Id { get; set; }
    private bool _isNew => !Id.HasValue;

    // MUTABLE page view-model (safe for @bind)
    private StepVm? _vm;

    protected override async Task OnInitializedAsync()
    {
        if (_isNew)
        {
            var wfId = ParseWfIdFromQuery();
            _vm = new StepVm
            {
                Id = Guid.Empty,
                WorkflowTemplateId = wfId,
                StepOrder = 1,
                Code = "",
                Name = "",
                AssignmentMode = "AutoAssign",
                AllowedRolesCsv = null,
                AllowCreatorOrPreparer = false
            };
        }
        else
        {
            var dto = await Steps.GetAsync(Id!.Value);
            if (dto is null) { Nav.NavigateTo("/admin/workflows"); return; }

            _vm = new StepVm
            {
                Id = dto.Id,
                WorkflowTemplateId = dto.WorkflowTemplateId,
                StepOrder = dto.StepOrder,
                Code = dto.Code,
                Name = dto.Name,
                AssignmentMode = dto.AssignmentMode,
                AllowedRolesCsv = dto.AllowedRolesCsv,
                AllowCreatorOrPreparer = dto.AllowCreatorOrPreparer
            };
        }
    }

    // Matches EventCallback<EditContext>
    private async Task HandleValidSubmit(EditContext _)
    {
        if (_vm is null) return;

        var dto = new StepEditDto(
          Id: _vm.Id,
          WorkflowTemplateId: _vm.WorkflowTemplateId,
          StepOrder: _vm.StepOrder,
          Code: _vm.Code ?? "",
          Name: _vm.Name ?? "",
          AssignmentMode: _vm.AssignmentMode ?? "AutoAssign",
          AllowedRolesCsv: _vm.AllowedRolesCsv,
          AllowCreatorOrPreparer: _vm.AllowCreatorOrPreparer
        );

        if (_isNew)
            await Steps.CreateAsync(dto);
        else
            await Steps.UpdateAsync(dto);

        Nav.NavigateTo($"/admin/workflows/{_vm.WorkflowTemplateId}/steps");
    }

    private Guid ParseWfIdFromQuery()
    {
        var uri = new Uri(Nav.Uri);
        var query = QueryHelpers.ParseQuery(uri.Query);
        if (query.TryGetValue("wfId", out var wfIdStr) && Guid.TryParse(wfIdStr, out var g))
            return g;
        return Guid.Empty;
    }

    // Simple mutable VM
    private sealed class StepVm
    {
        public Guid Id { get; set; }
        public Guid WorkflowTemplateId { get; set; }
        public int StepOrder { get; set; }
        public string? Code { get; set; }
        public string? Name { get; set; }
        public string? AssignmentMode { get; set; }
        public string? AllowedRolesCsv { get; set; }
        public bool AllowCreatorOrPreparer { get; set; }
    }
}
